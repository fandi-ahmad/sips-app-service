<%- include('../components/base/head') %>
<body>

  <div id="app">
    <%- include('../components/navbar') %>
    <%- include('../components/sidebar') %>
    <%- include('../components/titleBar', {title: 'Pegawai'}) %>
    
    <section class="section main-section">
  
      <div class="card has-table">
        <%- include('../components/cardHead', {title: 'Daftar Pegawai'}) %>
        <div class="card-content">
          <table>
            <thead>
              <tr>
                <th></th>
                <th>Nama</th>
                <th>Jabatan</th>
                <th>NIP</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% pegawais.forEach((pegawai, index) => { %>
                <tr>
                  <td class="image-cell"><%= index + 1 %></td>
                  <td data-label="Nama"><%= pegawai.nama %></td>
                  <td data-label="Jabatan"><%= pegawai.jabatan %></td>
                  <td data-label="NIP"><%= pegawai.nip %></td>
                  <td class="actions-cell">
                    <div class="buttons right nowrap">
                      <button id="editButton" class="button small green --jb-modal"  data-target="edit" type="button"
                       data-id="<%= pegawai.id %>"
                       data-nama="<%= pegawai.nama %>"
                       data-jabatan="<%= pegawai.jabatan %>"
                       data-nip="<%= pegawai.nip %>"
                      >
                        <span class="icon"><i class="mdi mdi-pen"></i></span>
                      </button>
                      <button class="button small red --jb-modal" data-target="delete" type="button" data-id="<%= pegawai.id %>">
                        <span class="icon"><i class="mdi mdi-trash-can"></i></span>
                      </button>
                    </div>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
          <div class="table-pagination">
            <div class="flex items-center justify-between">
              <div class="buttons">
                <button type="button" class="button active">1</button>
                <button type="button" class="button">2</button>
                <button type="button" class="button">3</button>
              </div>
              <small>Page 1 of 3</small>
            </div>
          </div>
        </div>
      </div>
    </section>
  
    <%- include('../components/footer') %>

    <!-- ===== CREATE FORM ===== -->
    <% 
      const inputLocate = '../components/baseInput'
      const baseInputNama = include(inputLocate, {name: 'nama'});
      const baseInputJabatan = include(inputLocate, {name: 'jabatan'});
      const baseInputNip = include(inputLocate, {name: 'nip'});
    %>
    <%- include('../components/modal/baseModal', {title: 'Create Pegawai', body: /*html*/ `
      <div class="field-body">
        ${baseInputNama} ${baseInputJabatan} ${baseInputNip}
      </div>
      <div class="field grouped mt-2">
        <div class="control">
          <div class="button --jb-modal-close" id="btnCancel">Cancel</div>
        </div>
        <div class="control">
          <button type="submit" class="button red" onclick="createPegawaiForm()">Create</button>
        </div>
      </div>
    `}) %>
    
    <!-- ===== UPDATE FORM ===== -->
    <% 
      const updadeInputId = include(inputLocate, {name: 'id', id: 'editId', type: 'hidden', label: ' '});
      const updadeInputNama = include(inputLocate, {name: 'nama', id: 'editNama'});
      const updadeInputJabatan = include(inputLocate, {name: 'jabatan', id: 'editJabatan'});
      const updadeInputNip = include(inputLocate, {name: 'nip', id: 'editNip'});
    %>
    <%- include('../components/modal/baseModal', {title: 'Update Pegawai', id: 'edit', body: /*html*/ `
      <div class="field-body">
        ${updadeInputId} ${updadeInputNama} ${updadeInputJabatan} ${updadeInputNip}
      </div>
      <div class="field grouped mt-2">
        <div class="control">
          <div class="button --jb-modal-close">Cancel</div>
        </div>
        <div class="control">
          <button type="submit" class="button red" onclick="updatePegawaiForm()">Update</button>
        </div>
      </div>
    `}) %>

    <!-- ===== DELETE FORM ===== -->
    <%- include('../components/modal/baseModal', {title: 'Delete Pegawai', id: 'delete', body: /*html*/ `
      <p class='my-10'>Delete this?</p>
      <div class="field grouped mt-2">
        <div class="control">
          <div class="button --jb-modal-close">Cancel</div>
        </div>
        <div class="control">
          <input type="hidden" id="deleteWhereId" name="id">
          <button class="button red" type="submit" onclick="deletePegawaiForm()">Confirm</button>
        </div>
      </div>
    `}) %>

  </div>
  
</body>
</html>
<%- include('../components/base/footer') %>
<script>
  const apiUrl = '<%= apiUrl %>';

  const getTheId = (id) => {
    return document.getElementById(id)
  }

  let pegawaisApi = []
  let pegawaiList = []

  // get all data pegawai
  const getAllData = async () => {
    try {
      const response = await fetch(`${apiUrl}/pegawai`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getItem('accessToken')}`
        },
      });
      const data = await response.json();
      console.log(data, '<-- response get pegawai')
      pegawaiList = data.data
      console.log(pegawaiList, '<-- pegawai list')
    } catch (error) {
      console.log(error, '<-- error pegawai')
    }
  }

  getAllData()

  // btn create
  const createPegawaiForm = async () => {
    nama = getTheId('nama').value
    jabatan = getTheId('jabatan').value
    nip = getTheId('nip').value
    
    if (nama == '' && jabatan == '' && nip == '') {
      alert('input tidak boleh kosong')
    } else {
      createPegawaiApi(nama, jabatan, nip)
    }
  }

  const createPegawaiApi = async (nama, jabatan, nip) => {
    try {
      const response = await fetch(`${apiUrl}/pegawai`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getItem('accessToken')}`
        },
        body: JSON.stringify({ 
          nama: nama,
          jabatan: jabatan,
          nip: nip
        })
      });
      const data = await response.json()
      location.reload()
      alert('create pegawai successfully')
    } catch (error) {
      alert('ups, something wrong!')
      console.log('Error:', error);
    }
  };


  const editButtons = document.querySelectorAll('.button[data-target="edit"]');
  const deleteButtons = document.querySelectorAll('.button[data-target="delete"]');
  const editId = getTheId('editId')
  const editNama = getTheId('editNama')
  const editJabatan = getTheId('editJabatan')
  const editNip = getTheId('editNip')

  const deleteWhereId = getTheId('deleteWhereId')

  // btn update
  const updatePegawaiForm = () => {
    updatePegawaApi()
  }

  const updatePegawaApi = async () => {
    try {
      const response = await fetch(`${apiUrl}/pegawai/update`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getItem('accessToken')}`
        },
        body: JSON.stringify({ 
          id: editId.value,
          nama: editNama.value,
          jabatan: editJabatan.value,
          nip: editNip.value
        })
      });
      const data = await response.json()
      location.reload()
      alert('update pegawai successfully')
    } catch (error) {
      alert('ups, something wrong!')
      console.log('Error:', error);
    }
  }

  const deletePegawaiForm = () => {
    deletePegawaiApi()
  }

  const deletePegawaiApi = async () => {
    try {
      const response = await fetch(`${apiUrl}/pegawai/delete`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getItem('accessToken')}`
        },
        body: JSON.stringify({ 
          id: deleteWhereId.value,
        })
      });
      const data = await response.json()
      location.reload()
      alert('delete pegawai successfully')
    } catch (error) {
      alert('ups, something wrong!')
      console.log('Error:', error);
    }
  }

  let idForDelete = 0

  // get id for edit
  editButtons.forEach((button) => {
    button.addEventListener('click', function() {
      const data = this.dataset
      editId.value = data.id
      editNama.value = data.nama
      editJabatan.value = data.jabatan
      editNip.value = data.nip
      console.log(data.id)
    });
  });


  deleteButtons.forEach((button) => {
    button.addEventListener('click', function() {
      idForDelete = parseInt(this.dataset.id)
      deleteWhereId.value = idForDelete
    })
  })


</script>